https://github.com/sandipmohapatra/Batch37
----------------------------------------------------------------------

1)Java is a object Oriented programing language.
2)It is simpler than c and c++ as we don't have pointer concept,multiple inheritance,operator overloading.
3)Java support multi-threading or multi-tasking.
4)we can develop webapplication,network application,standalone application, and mobile application.
5)In java we have constructor but no destructor .There is automatic garbage clearance.
6)In java we have interface which support multiple inheritance.
7)we have 4 access specifier in java which makes java more secure language.
-------------------------------------------------
i)private :- if we declare variables and methods as private we can access it with in the class only.
ii)public:- if we declare variables and methods as public we can access it with in the class ,outside the class and also outside the package.
iii)protected:-if we declare variables and methods as protected we can access it with in the class and in the child class also.
iv)default:-if we declare variables and methods as default we can access it with in the class ,outside the class but not outside the package.
------------------------------------------------------------------------------------
Data type:-
------------------
primative datatypes
-----------------------------
1)byte - 1 byte
2)short - 2 bytes
3)int    - 4 bytes
4)long - 8 bytes
5)char - 2 bytes
6)boolean - 1 bit
7)float - 4 bytes
8)double - 8 bytes
-------------------------------------------------
derived datatypes
-----------------------------
1)String :- it is a group of characters (example :-a is a character ,apple is a string)
2)array :- array of string ,array of int.
3)class
-----------------------------------------------------------------------------
operator:-
-----------------
we have 3 types of operators
1)unary :- i++,++i,i--,--i
2)binary :-
i)Arithmatic operator :- +,-,*,/,%(modulus/reminder)
ii)comparative operator :- <,>,<=,>=,==,!=
iii)assignment :- =
iv)bitwise operator :-<< ,>>
3)Ternary operator :- ?,:
----------------------------------------------------------------------------------
class :- a class is a collection of data members and member functions.
A class is a blue print /framework of an object.
we can access the data members and member function of a class by using object.
An object is a reference pointer to a class.
----------------------------------
example-1
--------------
package com.sandip;

public class First
{
public static void main(String[] args) 
{
	byte a=10;
	short b=20;
	int c=30;
	long d=40;
	char e='a';
	float f=45.34f;
	double g=45.78;
	String h="apple";
	System.out.println("the value of a is "+a);
	System.out.println("the value of b is "+b);
	System.out.println("the value of c is "+c);
	System.out.println("the value of d is "+d+"the value of e is"+e);
	System.out.println("the value of f is "+f+"the value of g is"+g);
	System.out.println("the value of h is "+h);
}
}
---------------------------------------------------------------------------------
example-2
-------------------
package com.sandip;
import java.util.*;
public class Second 
{
public static void main(String[] args) 
{
	Scanner ob=new Scanner(System.in);
	System.out.println("enter 2 nos");
	int a=ob.nextInt();
	int b=ob.nextInt();
	int c=a+b;
	System.out.println("the sum is "+c);
}
}
--------------------------------------------------------------------
wap to enter 5 nos and find the sum and average.
-------------------------------------------------------------------------
wap to create a class employee .enter employee no,name,address and display it.
----------------------------------------------------------------------------------
example-3
-------------------------
package com.sandip;
import java.util.*;
public class Employee 
{
int empno;
String name,address;
void input()
{
	Scanner ob=new Scanner(System.in);
	System.out.println("enter empno,name,address");
	empno=ob.nextInt();
	name=ob.next();
	address=ob.next();
}
void display()
{
	System.out.println("the empno is "+empno);
	System.out.println("the name is "+name);
	System.out.println("the address is "+address);
	}
public static void main(String[] args) {
	Employee ob1=new Employee();
	ob1.input();
	ob1.display();
}
}
------------------------------------------------------------------------------
example-4
----------------
package com.sandip;
import java.util.*;
public class Student 
{
	int rollno;
	String name,address;
	float phy,chem,bio,maths,total,avg,grade;
	void input()
	{
		Scanner ob=new Scanner(System.in);
		System.out.println("enter rollno,name,address,phy,chem,bio,maths marks");
		rollno=ob.nextInt();
		name=ob.next();
		address=ob.next();
		phy=ob.nextFloat();
		chem=ob.nextFloat();
		bio=ob.nextFloat();
		maths=ob.nextFloat();
		total=phy+chem+bio+maths;
		avg=total/4;
			}
	void display()
	{
		System.out.println("the rollno is"+rollno+"The name is"+name);
		System.out.println("the address is"+address);
		System.out.println("the phy marks is"+phy+"the chem marks is"+chem);
		System.out.println("the bio marks is"+bio+"The maths marks is"+maths);
		System.out.println("the total is"+total);
		System.out.println("the average is"+avg);
		if(avg>=70)
			System.out.println("first division");
		else if(avg>=60)
			System.out.println("Second division");
		else if(avg>=50)
			System.out.println("Third division");
		else
			System.out.println("fail");
	}
	public static void main(String[] args) {
		Student ob=new Student();
		ob.input();
		ob.display();
	}

}
------------------------------------------------------------------------------
wap to enter bank details and display it.
accno,name,balance,withdraw,deposite and display the available balance
--------------------------------------------------------------------------------------

example-5
-------------------
package com.sandip;
import java.util.*;
public class Bank
{
int accno;
String name;
float bal;
void input()
{
	Scanner ob=new Scanner(System.in);
	System.out.println("enter accno,name,Balance");
	accno=ob.nextInt();
	name=ob.next();
	bal=ob.nextFloat();
}
float withdraw()
{
	Scanner ob=new Scanner(System.in);
	System.out.println("enter the withdraw amount");
	float wd=ob.nextFloat();
	if(bal >= wd+1000.00)//(5000 >=3500+1000)
		bal=bal-wd;
	else
		System.out.println("Balance is low");
	return bal;
}
float deposite()
{
	Scanner ob=new Scanner(System.in);
	System.out.println("enter the deposite amount");
	float dip=ob.nextFloat();
	bal=bal+dip;
	return bal;
}
public static void main(String[] args) {
	Bank ob=new Bank();
	ob.input();
	Scanner ob1=new Scanner(System.in);
	System.out.println("enter 1 for deposite 2 for withdraw");
	int choice=ob1.nextInt();
	if(choice==1)
		System.out.println("the total balance is "+ob.deposite());
	else
		System.out.println("the total balance is "+ob.withdraw());
}
}

----------------------------------------------------------------
constructor :- A constructor is a function which has the same name as that of the class name.
It doesnot return any value nor it has any return type.
There are 2 types of constructor.
1)default constructor :- It is without any parameter.
2)parameterized constructor:- It is with parameter.
-------------------------------------------
example-6
--------------------
package com.sandip;

public class ConstructorDemo 
{
int rollno;//intance variable can be accessed through out the class
String name,address;
ConstructorDemo()
{
	System.out.println("This is a default constructor");
}
//local variable can be accessed within the method()
public ConstructorDemo(int rollno, String name, String address) 
{
	this.rollno = rollno;
	this.name = name;
	this.address = address;
}
void display()
{
	System.out.println("the rollno is "+rollno);
	System.out.println("the name is "+name);
	System.out.println("the address is "+address);
	}
public static void main(String[] args)
{
	ConstructorDemo ob=new ConstructorDemo();
	ConstructorDemo ob1=new ConstructorDemo(101,"sandip","Bangalore");
	ConstructorDemo ob2=new ConstructorDemo(102,"Kiran","Bangalore");
	ob1.display();ob2.display();
}
}
--------------------------------------------------------------------------------------
Difference between function and constructor is function can have any name other than the class name.
It returns a value.If we use more than one function with same name but with different data types the parameters and return type it is known as function overloading.
---------------------------------------------------------------------------------------------------
example-7
-------------------
package com.sandip;

public class ConstructorDemo 
{
int rollno;//intance variable can be accessed through out the class
String name,address;
ConstructorDemo()
{
	System.out.println("This is a default constructor");
}
//local variable can be accessed within the method()
public ConstructorDemo(int rollno, String name, String address) 
{
	this.rollno = rollno;
	this.name = name;
	this.address = address;
}
//function can have any name and it returns a value
int sum(int a,int b)
{
	return a+b;
}

int sub(int a,int b)
{
	return a-b;
}
void display()
{
	System.out.println("the rollno is "+rollno);
	System.out.println("the name is "+name);
	System.out.println("the address is "+address);
	}
public static void main(String[] args)
{
	ConstructorDemo ob=new ConstructorDemo();
	ConstructorDemo ob1=new ConstructorDemo(101,"sandip","Bangalore");
	ConstructorDemo ob2=new ConstructorDemo(102,"Kiran","Bangalore");
	ob1.display();ob2.display();
	System.out.println("the sum is "+ob.sum(8, 9));
	System.out.println("the sum is "+ob1.sum(18,19));
	System.out.println("the sub is "+ob.sub(8, 9));
	System.out.println("the sub is "+ob1.sub(18,19));
	
}
}
------------------------------------------------------------------------------- 
function overloading
-----------------------------------------
example-8
-----------------
package com.sandip;

public class ConstructorDemo 
{
int rollno;//intance variable can be accessed through out the class
String name,address;
ConstructorDemo()
{
	System.out.println("This is a default constructor");
}
//local variable can be accessed within the method()
public ConstructorDemo(int rollno, String name, String address) 
{
	this.rollno = rollno;
	this.name = name;
	this.address = address;
}
//function can have any name and it returns a value
int sum(int a,int b)
{
	return a+b;
}
float sum(float a,float b)
{
	return a+b;
}
int sub(int a,int b)
{
	return a-b;
}
void display()
{
	System.out.println("the rollno is "+rollno);
	System.out.println("the name is "+name);
	System.out.println("the address is "+address);
	}
public static void main(String[] args)
{
	ConstructorDemo ob=new ConstructorDemo();
	ConstructorDemo ob1=new ConstructorDemo(101,"sandip","Bangalore");
	ConstructorDemo ob2=new ConstructorDemo(102,"Kiran","Bangalore");
	ob1.display();ob2.display();
	System.out.println("the sum is "+ob.sum(8, 9));
	System.out.println("the sum is "+ob1.sum(18,19));
	System.out.println("the sub is "+ob.sub(8, 9));
	System.out.println("the sub is "+ob1.sub(18,19));
	System.out.println("the sum is "+ob.sum(8.3f, 9.3f));
	System.out.println("the sum is "+ob1.sum(18.5f,19.3f));
	
}
}
-------------------------------------------------------------------------------------------------
wap to create a parameterized constructor .pass the values dynamically at the runtime and display it.
employee class :- empno,name,designation,salary.
-------------------------------------------------------------------------------------------------
example-9
------------------
package com.sandip;

public class ConstructorDemo 
{
int rollno;//intance variable can be accessed through out the class
String name,address;
ConstructorDemo()
{
	System.out.println("This is a default constructor");
}
//local variable can be accessed within the method()


public ConstructorDemo(int rollno, String name, String address) 
{
	this.rollno = rollno;
	this.name = name;
	this.address = address;
}

public ConstructorDemo(String name, String address,int rollno) 
{
	this.rollno = rollno;
	this.name = name;
	this.address = address;
}
//function can have any name and it returns a value
int sum(int a,int b)
{
	return a+b;
}

int sum(int a,int b,int c)
{
	return a+b+c;
}

float sum(float a,float b)
{
	return a+b;
}
int sub(int a,int b)
{
	return a-b;
}
void display()
{
	System.out.println("the rollno is "+rollno);
	System.out.println("the name is "+name);
	System.out.println("the address is "+address);
	}
public static void main(String[] args)
{
	ConstructorDemo ob=new ConstructorDemo();
	ConstructorDemo ob1=new ConstructorDemo(101,"sandip","Bangalore");
	ConstructorDemo ob2=new ConstructorDemo(102,"Kiran","Bangalore");
	ConstructorDemo ob3=new ConstructorDemo("Kiran","Bangalore",103);
	ob1.display();ob2.display();ob3.display();
	System.out.println("the sum is "+ob.sum(8, 9));
	System.out.println("the sum is "+ob1.sum(18,19));
	System.out.println("the sub is "+ob.sub(8, 9));
	System.out.println("the sub is "+ob.sum(8, 9,7));
	System.out.println("the sub is "+ob1.sub(18,19));
	System.out.println("the sum is "+ob.sum(8.3f, 9.3f));
	System.out.println("the sum is "+ob1.sum(18.5f,19.3f));
	
}
}
----------------------------------------------------------------------------------------------------
example-10
-------------------
package com.sandip;

public class GetSet1 
{
int rollno;
String name,address;
public int getRollno() {
	return rollno;
}
public void setRollno(int rollno) {
	this.rollno = rollno;
}
public String getName() {
	return name;
}
public void setName(String name) {
	this.name = name;
}
public String getAddress() {
	return address;
}
public void setAddress(String address) {
	this.address = address;
}
}
--------------------------------------------
package com.sandip;

public class GetSet2 
{
public static void main(String[] args) {
	GetSet1 ob=new GetSet1();
	ob.setRollno(10);
	ob.setName("sandip");
	ob.setAddress("Bangalore");
	System.out.println("the rollno is "+ob.getRollno());
	System.out.println("the name is "+ob.getName());
	System.out.println("the address is "+ob.getAddress());
}
}
----------------------------------------------------------------------------------------------------
Object oriented programming 
--------------------------------------------
1)class
2)object

3)Inheritance:-java suppport single inheritance.(single,multi-level,hyrarchal).reuse of existing component.

4)poly-merphisim:- runtime(function overriding),compile time(function overloading)

5)abstraction:-Hiding the complexcity and displaying the simplycity.(example :- fan)

6)encapsulation :- capsul (protecting the medicine)
In java we can protect our data using access specifiers(private,protected,default,public)
----------------------------------------------------------------------------------------------------------------
wap to enter product details and display it.
prodit,prodname,prodprice
use getter and setter to set the value and get the value.
-------------------------------------------------------------------------------
Example-11
----------------------
array:- It is a collection of single data type.
example:- array of integer,array of string.
---------------------
package com.sandip;
import java.util.*;
public class ArrayDemo 
{
public static void main(String[] args) {
	int a[]=new int[5];
	Scanner ob=new Scanner(System.in);
	System.out.println("enter 5 nos");
	for(int i=0;i<5;i++)
		a[i]=ob.nextInt();
	
	System.out.println(" 5 nos are");
	for(int i=0;i<5;i++)
		System.out.println(a[i]);
	
}
}
------------------------------------------------------------------------------
array of objects
-----------------------
example-12
-----------------------
package com.sandip;
import java.util.*;
public class ArrayObject
{
String rollno,name,address;
void input()
{
	Scanner ob=new Scanner(System.in);
	System.out.println("Enter rollno,name,address");
	rollno=ob.nextLine();
	name=ob.nextLine();
	address=ob.nextLine();
}
void display()
{
	System.out.println("the rollno is "+rollno);
	System.out.println("the name is "+name);
	System.out.println("the address is "+address);
	}
public static void main(String[] args) {
	ArrayObject[] obj=new ArrayObject[3];//array of objects
	for(int i=0;i<3;i++)
	{
		obj[i]=new ArrayObject();//constructor
		obj[i].input();
			}
	System.out.println("The 3 students are :");
	for(int i=0;i<3;i++)
	{
	obj[i].display();
	}
	
}
}
-----------------------------------------------------------------------------------------------------
wap to create a Bank class
enter accno,name,email,balance of 20 customers
store the data  and display it.
--------------------------------------------------------------
Inheritance:-java suppport single inheritance.(single,multi-level,hyrarchal).reuse of existing component.
We use the keyword super to excess the parent class variables and methods into the child class.  
we use the keyword extends to inherite the parent class into the child class.
-------------------------------------------------------------------------------------------------------------
example-13
--------------------
package com.sandip;

public class Product
{
int prodid;
String prodname,prodprice;
public Product(int prodid, String prodname, String prodprice)
{
	this.prodid = prodid;
	this.prodname = prodname;
	this.prodprice = prodprice;
}
void display()
{
	System.out.println("the product id is :"+prodid);
	System.out.println("the product name is :"+prodname);
	System.out.println("the product price is :"+prodprice);
	}

}
-----------------------------------------------------------------
package com.sandip;

public class Customer extends Product
{
int custid;
String custname,custadd;
public Customer(int prodid, String prodname, String prodprice, int custid, String custname, String custadd) 
{
	super(prodid, prodname, prodprice);//the super class constructor will execute first then the subclass constructor
	this.custid = custid;
	this.custname = custname;
	this.custadd = custadd;
}
void display()
{
	super.display();
	System.out.println("the customer id is :"+custid);
	System.out.println("the customer name is :"+custname);
	System.out.println("the customer address is :"+custadd);
	}
public static void main(String[] args) 
{
	Customer obj=new Customer(101,"samsung fridge","18000",1001,"sandip","Bangalore");
	obj.display();
}
}
--------------------------------------------------------------------------------------------
Example-14
-------------------
1)2 dimentional array
2)multi-level inheritance
3)Inheritance (is-a relationship)
4)Aggrigation-has-a relationship (student has address,employee has dept,bank has customer)
-----------------------------------------------------------------------------------------
Multi-level Inheritance
-------------------------------
student---rollno,name,address
marks ---phy,chem,bio
result ---total,avg,grade
--------------------------------------------------
package com.multilevel;
import java.util.*;
public class Student 
{
	String rollno,name,address;
	void input()
	{
		Scanner ob=new Scanner(System.in);
		System.out.println("enter rollno,name,address");
		rollno=ob.nextLine();
		name=ob.nextLine();
		address=ob.nextLine();
	}
	void display()
	{
		System.out.println("the rollno is "+rollno+"The name is "+name+" The address is "+address);
	}
}
------------------------------------------------------------------------------
package com.multilevel;

import java.util.Scanner;

public class Marks extends Student
{
int phy,chem,bio;
void input()
{
	super.input();
	Scanner ob=new Scanner(System.in);
	System.out.println("enter phy,chem,bio marks");
	phy=ob.nextInt();
	chem=ob.nextInt();
	bio=ob.nextInt();
}
void display()
{
	super.display();
System.out.println("The physics marks is"+phy+"The chemistry marks is "+chem+"The biology marks is "+bio);
}
}
---------------------------------------------------------
package com.multilevel;

public class Result extends Marks 
{
int total,avg,grade;
void input()
{
	super.input();
	total=phy+chem+bio;
	avg=total/3;
	
}
void display()
{
	super.display();
	System.out.println("the total marks is "+total);
	System.out.println("the average marks is "+avg);
	if(avg>=70)
		System.out.println("First Division");
	else if(avg>=60)
		System.out.println("Second Division");
	else if(avg>=50)
		System.out.println("Third Division");
	else
		System.out.println("Fail");
	}
public static void main(String[] args) {
	Result ob=new Result();
	ob.input();
	ob.display();
}
}
---------------------------------------------------------------------------------------------
Hyrarchal Inheritance
-----------------------------------
In this we have a parent class and 2 or more child class
--------------------------------------------------------------------------------------
Customer --->phoneno,name,address
ICICI Bank extends customer--->accno,bal,bank loc
SBI Bank extends customer---->accno,bal,Bank loc
-----------------------------------------------------------------------------------------
Example-15
-----------------
package com.hyrarchal;
import java.util.*;
public class Customer 
{
	String phoneno,name,address;
	void input()
	{
		Scanner ob=new Scanner(System.in);
		System.out.println("Enter phoneno,name and address");
		phoneno=ob.nextLine();
		name=ob.nextLine();
		address=ob.nextLine();
			}
	void display()
	{
		System.out.println("The phoneno is "+phoneno+"The name is "+name+" The address is"+address);
	}
}
------------------------------------------------
package com.hyrarchal;

import java.util.Scanner;

public class ICICIBank extends Customer
{
	String accno,bal,bankloc;
	void input()
	{
		super.input();
		Scanner ob=new Scanner(System.in);
		System.out.println("Enter accno,Balance and Bank Location");
		accno=ob.nextLine();
		bal=ob.nextLine();
		bankloc=ob.nextLine();
			}
	void display()
	{
		super.display();
		System.out.println("The accno is "+accno+"The bal is "+bal+" The bank Location is"+bankloc);
	}
}
--------------------------------------------------------------
package com.hyrarchal;

import java.util.Scanner;

public class SBIBank extends Customer
{
	String accno,bal,bankloc;
	void input()
	{
		super.input();
		Scanner ob=new Scanner(System.in);
		System.out.println("Enter accno,Balance and Bank Location");
		accno=ob.nextLine();
		bal=ob.nextLine();
		bankloc=ob.nextLine();
			}
	void display()
	{
		super.display();
		System.out.println("The accno is "+accno+"The bal is "+bal+" The bank Location is"+bankloc);
	}
}
----------------------------------------------

package com.hyrarchal;

import java.util.Scanner;

public class MainClass 
{
public static void main(String[] args) {
Scanner ob=new Scanner(System.in);
	System.out.println("Enter which bank details you want to see 1.ICICI Bank 2.SBI Bank");
	int choice=ob.nextInt();
	switch(choice)
	{
	case 1:
		ICICIBank ob1=new ICICIBank();
		ob1.input();
		ob1.display();
		break;
	case 2:
		SBIBank ob2=new SBIBank();
		ob2.input();
		ob2.display();
		break;
		default:
			System.out.println("Wrong choice");
	}
}
}
--------------------------------------------------------------------
Has-A Relationship
example-16
------------------------
package com.HasA;

public class Employee 
{
	int empno;
String name,phoneno;
Address address;
public Employee(int empno, String name, String phoneno, Address address)
{
	this.empno = empno;
	this.name = name;
	this.phoneno = phoneno;
	this.address = address;
}
void display()
{
	System.out.println("empno :"+empno+"name :"+name+"Phone no:"+phoneno+"address :"+address);
}

}
-----------------------------------------------------
package com.HasA;

public class Address 
{
int streetno,roadno;
String city,state;
public Address(int streetno, int roadno, String city, String state) 
{
	this.streetno = streetno;
	this.roadno = roadno;
	this.city = city;
	this.state = state;
}


@Override
public String toString()  //convert object to string 
{
	return "Address [streetno=" + streetno + ", roadno=" + roadno + ", city=" + city + ", state=" + state + "]";
}


public static void main(String[] args) {
	Address address=new Address(10,20,"Bangalore","Karnataka");
	Employee emp=new Employee(101,"sandip","7766554433",address);
	emp.display();
}
}
--------------------------------------------------------------------------
Array and Collection
1)In array we have to mention the array size.
int a[]=new int[5];
1)In collection we don't have mention the size it dynamically increase when we add elements and dynamically decrease when we delete the elements.
---------------------------------------------------------------
2)we have array of integer,float,double,string etc....
2)In collection we enter and store Objects.
----------------------------------------------------------------
Example -17
----------------------
package com.collection;

public class Employee 
{
int empno;
String name,phoneno;
public Employee(int empno, String name, String phoneno)
{
	this.empno = empno;
	this.name = name;
	this.phoneno = phoneno;
	}
@Override
public String toString() {
	return "Employee [empno=" + empno + ", name=" + name + ", phoneno=" + phoneno + "]";
}

}
------------------------------------------------------------------------------
package com.collection;
import java.util.*;
public class TestCollection 
{
public static void main(String[] args) {
	Employee ob1=new Employee(101,"sandip","7766554433");
	Employee ob2=new Employee(102,"sai","7766554433");
	Employee ob3=new Employee(103,"venket","7766554433");
	Employee ob4=new Employee(104,"sunil","7766554433");
	LinkedList ls=new LinkedList();
	ls.add(ob1);
	ls.add(ob2);
	ls.add(ob3);
	ls.add(ob4);
	System.out.println(ls);
}
}
-------------------------------------------------------------------------------------------
wap to enter details of a product and store into a LinkedList and display it.
product --->productid,productname,productprice.
------------------------------------------------------------------------
corejava,jdbc,Hibernate
html,css,javascript,Bootstrap,Jquery,Angular10
oracle,Mysql,Mongodb
spring,spring boot,Micro-services
AWS
------------------------------------------------------------------------
Frontend(angular10)---middleware(spring...)---Backend(oracle,mysql,mongodb)
----------------------------------------------------------------------------
testing-------junit,jenkin
deployment----------docker
-------------------------------------------------------------
development
testing
production
---------------------------------------------------------
Example-18
---------------------
package com.sandip;
import java.util.*;
public class TwoDimentional
{
public static void main(String[] args)
{
	int a[][]=new int[3][3];
	System.out.println("enter 3 *3 array");
	Scanner ob=new Scanner(System.in);
	for(int i=0;i<3;i++)//outer loop work for 1 time
	{
		for(int j=0;j<3;j++)//work for 3 times
		{
			a[i][j]=ob.nextInt();
		}
	}
	
	System.out.println("The 3 *3 array");
	for(int i=0;i<3;i++)
	{
		for(int j=0;j<3;j++)
		{
			System.out.print(a[i][j]+"  ");
		}
		System.out.println();
	}
	
}
}
----------------------------------------------------------------
Method Overloading
Method Overriding
Abstract class
Interface
static keyword
final keyword
--------------------------------------------------
Method Overloading.It is known as compile time Polymorphism.Compiler will deside where to send the values.We require a single class.
It mean we will have same method name with different data types the return type and parameters.
int sum(int a,int b)
float sum(float a,float b)
double sum(double a,double b)
-------------------------------------------------------------------- 
Example-19
-----------------
package org.methodOverloading;

public class OverLoadDemo
{
int sum(int a,int b)
{
	return a+b;
}
float sum(float a,float b)
{
	return a+b;
}
double sum(double a,double b)
{
	return a+b;
}
public static void main(String[] args) {
	OverLoadDemo ob=new OverLoadDemo();
	System.out.println("the sum of 2 nos is :"+ob.sum(7, 8));
	System.out.println("the sum of 2 nos is :"+ob.sum(7.3, 8.4));
	System.out.println("the sum of 2 nos is :"+ob.sum(7.2f, 8.2f));
	System.out.println("the sum of 2 nos is :"+ob.sum(17, 18));
	}
}
--------------------------------------------------------------------------
Method Overriding :- we require two or more classes for method overriding.
It is known as runtime polymorphism.
-----------------------------------------------------------
Example-20
----------------
package org.methodOverloading;

class OverridingDemo1 
{
void display()
{
	System.out.println("This is first display method");
}
}
class OverridingDemo extends OverridingDemo1
{
	void display()
	{
		System.out.println("This is second display method");
	}
	public static void main(String[] args) {
		OverridingDemo ob=new OverridingDemo();
		ob.display();
	}
}
-------------------------------------------------------------------------------------------
Real example of method Overriding is present in Abstract class and Interface.
Use of method Overriding.
-------------------------------------
we are going to develop a banking project. The client wants 5 modules 1)registration 2)login 3)deposite 4)withdraw 5)apply for debit/credit card.
the project artitech will create a abstract class Bank and in that these 5 abstract methods are present.
The abstract means it is a incomplete class and method.the developers has to override the methods into the child class and write the functionalities.
---------------------------------------------------------------------------------- 
Abstract class
-------------------
It is a class which conatins abstract methods and concrete methods.
Abstract methods are incomplete methods without body.
The concrete methods are methods with body.(general methods.
we cannot create object of the abstract class.
we have to inherite it into a child class where we have to override the abstract methods.
Then we can create object of the child class and access the methods.
In java we have to have a method body or we have to declare the method as abstract.
---------------------------------------------------------------------------------------------------------------
Example-21
--------------------
package org.methodOverloading;

abstract class AbstractClass
{
	abstract void display();
	abstract void display1();
	void display2()
	{
		System.out.println("This is method with body");
	}
}
public class ChildDemo extends AbstractClass 
{

	@Override
	void display() {
			System.out.println("This is a override method1");
	}

	@Override
	void display1() {
		System.out.println("This is a override method2");
			}
	public static void main(String[] args) {
		ChildDemo ob=new ChildDemo();
		ob.display();
		ob.display1();
		ob.display2();
	}

}
-----------------------------------------------
Interface :-
It contains only abstract methods.
It doesn't contain any concrete methods.
We cannnot create object of an interface.
We have to implement the interface into a child class.
We have to override the abstract methods into a child class and create object of the child class.
By interface we can perform multiple inheritance.
If we declare a variable inside the interface it by default static and final.
The override methods should be public.
-----------------------------------------------------------------------------------------------------------------------
example-22
----------------------
package org.methodOverloading;

interface apple
{
	int a=10; //the variable a is static and final
	void display();
}

interface orange
{
	void display1();
}

interface grapes extends orange
{
	void display2();
}

public class InterfaceDemo implements apple,grapes 
{

	@Override
	public void display1() {
	System.out.println("display1");
	}

	@Override
	public void display2() {
		System.out.println("display2");	
		
	}

	@Override
	public void display() {
		System.out.println("display3");
	}
	public static void main(String[] args) {
		InterfaceDemo ob=new InterfaceDemo();
		ob.display();
		ob.display1();
		ob.display2();
		System.out.println("the value of a is "+a);
	}
}
----------------------------------------------------------------------------------------------------------------
wap to enter 2 interger,2 float,2 double and find the sum using interface and child class.
----------------------------------------------------------------------------------------------------------------
example-23
package org.methodOverloading;

interface SumDemo
{
	int sum(int a,int b);
	float sum(float a,float b);
	double sum(double a,double b);
}
public class InterfaceDemo1 implements SumDemo
{

	@Override
	public int sum(int a, int b) {
	
		return a+b;
	}

	@Override
	public float sum(float a, float b) {
		return a+b;
	}

	@Override
	public double sum(double a, double b) {
		return a+b;
	}
public static void main(String[] args) {
	InterfaceDemo1 ob=new InterfaceDemo1();
	System.out.println("the sum is "+ob.sum(4, 7));
	System.out.println("the sum is "+ob.sum(4.4f, 7.5f));
	System.out.println("the sum is "+ob.sum(4.3, 7.333));
}
}
----------------------------------------------------------------------
static :- we can declare a variable as static ,method as static ,we can have static block and we can have static class.
we can access the variables,method,block,class without creating object.
We can access static variables and methods with the help of the class name also.
A single copy of the static variables,method,block,class will be created in the JVM.
It used for memory management.
A static block execute before the main method.
we cannot access a non-static variable inside a static method.
-------------------------------------------------------------------------------------------
example-24
---------------
package org.methodOverloading;

public class StaticDemo
{
static int x=10;
static int y=20;
static int sum(int a,int b)
{
	return a+b;
	}
static void display()
{
	System.out.println("the value of  x is "+x);
	System.out.println("the value of  y is "+y);
	}
static
{
	System.out.println("This is a static block");
}
public static void main(String[] args) //main is static method we don't have to create object for main()
{
	display();
	System.out.println("the sum is "+sum(6,7));
	System.out.println("The value of x is "+x);
}
}
----------------------------------------------------------------------------------
example-25
---------------------
package org.methodOverloading;

public class StaticDemo
{
static int x=10;
static int sum(int a,int b)
{
	return a+b;
	}
static void display()
{
	x++;
	System.out.println("the value of  x is "+x);
		}

public static void main(String[] args) //main is static method we don't have to create object for main()
{
	display();
	display();
	display();
	display();
	System.out.println("the sum is "+StaticDemo.sum(6,7));
	System.out.println("The value of x is "+x);
}
}
-------------------------------------------------------
final :-
This is done to protect our data.
we can declare variable as final,method as final and class as final.
final class cannot be inherited.
final variable cannot be changed.
final method cannot be overrided.
----------------------------------------------------------------------
example-26
------------------
package org.methodOverloading;

public final class FinalDemo 
{
final int a=10;
final void display()
{
	System.out.println("This is a final method");
}
public static void main(String[] args) {
	FinalDemo ob=new FinalDemo();
	ob.display();
	System.out.println("the value of a is "+ob.a);
}
}
---------------------------------------------------------------------
Collection framework
--------------------------------------
collection frame is a collection of objects.
It dynamically increases when we add the data and decreases when we the delete data.
In this we store ,manipulate the group of objects.
We do operations like searching ,sorting ,insertion ,deleteing etc.
Java collection provides many interfaces(Set,List,Map)
It provides many class like (Arraylist,Vector,LinkedList,HashSet,TreeSet,LinkedHashSet,HashMap,HashTable)
--------------------------------------------------------------------------------------------------
In array we write
int a[]=new int[5];//here the array size is fixed but in collection the size is not fixed.It increases and decreses automatically.

1)set(interface)---(classes)--TreeSet,HashSet,LinkedHashSet
2)list(interface)---(classes)--LinkedList,ArrayList,Vector,Stack
3)map(interface)---(classes)---HashTable,HashMap
-----------------------------------------------------------------------------------------
1)set(interface)
It does not allow duplicate values.
1)Hashset---Displays data in random order
2)LinkedHashSet---Displays data in the same order.
3)TreeSet---It displays data in sorted order.
---------------------------------------------------------------------------------
example-1
-----------------
package org.sandip;
import java.util.*;
public class TreeSet1
{
public static void main(String[] args) 
{
	TreeSet<Integer> ts=new TreeSet<Integer>();
	ts.add(40);
	ts.add(50);
	ts.add(60);
	ts.add(30);
	ts.add(20);
	ts.add(10);
	System.out.println(ts);
}
}
-----------------------------------------------------
example-2
----------------------
package org.sandip;
import java.util.*;
public class TreeSet1
{
public static void main(String[] args) 
{
	TreeSet<String> ts=new TreeSet<String>();
	ts.add("Sandip");
	ts.add("Amit");
	ts.add("Arun");
	ts.add("Sunil");
	ts.add("Arpit");
	ts.add("Bhushan");
	System.out.println(ts);
}
}
---------------------------------------------------------------------
example-3
------------------
package org.sandip;
import java.util.*;
public class TreeSet1
{
public static void main(String[] args) 
{
	TreeSet<String> ts=new TreeSet<String>();
	ts.add("Sandip");
	ts.add("Amit");
	ts.add("Arun");
	ts.add("Sunil");
	ts.add("Arpit");
	ts.add("Bhushan");
	ts.add("anu"); // a ascii value is 97 so it displays at the last 
	System.out.println(ts);
}
}
----------------------------------------------------------------
HashSet display data in random order
---------------------------------------------------
package org.sandip;
import java.util.*;
public class TreeSet1
{
public static void main(String[] args) 
{
	HashSet<String> ts=new HashSet<String>();
	ts.add("Sandip");
	ts.add("Amit");
	ts.add("Arun");
	ts.add("Sunil");
	ts.add("Arpit");
	ts.add("Bhushan");
	ts.add("anu");
	System.out.println(ts);
}
}
---------------------------------------------------------------------------
package org.sandip;
import java.util.*;
public class TreeSet1
{
public static void main(String[] args) 
{
	HashSet<String> ts=new HashSet<String>();
	ts.add("Bhushan");
	ts.add("anu");
	ts.add("Arpit");
	ts.add("Bhushan");
	ts.add("anu");
	ts.add("Sandip");
	ts.add("Amit");
	ts.add("Arun");
	ts.add("Sunil");
	ts.add("Arpit");
	System.out.println(ts);
}
}
----------------------------------------------------------
LinkedHashSet :- It display in the same order.
-----------------------------------------------------------
package org.sandip;
import java.util.*;
public class TreeSet1
{
public static void main(String[] args) 
{
	LinkedHashSet<String> ts=new LinkedHashSet<String>();
	ts.add("Bhushan");
	ts.add("anu");
	ts.add("Arpit");
	ts.add("Bhushan");
	ts.add("anu");
	ts.add("Sandip");
	ts.add("Amit");
	ts.add("Arun");
	ts.add("Sunil");
	ts.add("Arpit");
	System.out.println(ts);
}
}
------------------------------------------------------------------------------
Example-1
------------------
package org.sandip;

public class Student
{
int rollno;
String name,address;
public Student(int rollno, String name, String address)
{
	this.rollno = rollno;
	this.name = name;
	this.address = address;
}
@Override
public String toString() {
	return "Student [rollno=" + rollno + ", name=" + name + ", address=" + address + "]";
}}
---------------------------------------------------------------------------------
package org.sandip;
import java.util.*;
public class TreeSet1
{
public static void main(String[] args) 
{
	HashSet ts=new HashSet();// hetrogenious datatype is posible in hashset but not in TreeSet.
	ts.add("Bhushan");
	ts.add("Anu");
	Integer a=new Integer(10);
	Float b=new Float(10.34);
	ts.add(a);
	ts.add(b);
	Student obj=new Student(101,"sandip","Bangalore");
	ts.add(obj);
	System.out.println(ts);
}
}
-------------------------------------------------------------------------------------------
Example-2
--------------------
package org.sandip;
import java.util.*;
public class HashsetDemo 
{
public static void main(String[] args) 
{
HashSet<Integer> hs=new HashSet<Integer>();
System.out.println(hs.isEmpty());
System.out.println(hs.size());
hs.add(10);
hs.add(30);
hs.add(20);
System.out.println(hs.isEmpty());
System.out.println(hs.size());
System.out.println(hs.contains(30));
System.out.println(hs.contains(300));
hs.remove(10);
System.out.println(hs);
hs.clear();//whole hashset will be empty
System.out.println(hs);
System.out.println(hs.isEmpty());
System.out.println(hs.size());
}
}
------------------------------------------------------------------------------
phone no validation
----------------------------
package org.sandip;

public class Phone {
    private static boolean isValid(String s)
    {
        String regex = "\\d{3}-\\d{3}-\\d{4}"; 
        return s.matches(regex);
    }

    public static void main(String[] args) {
        System.out.println(isValid("123-456-7890"));
    }

}
---------------------------------------------------------------
Collection
JUNIT
Exception
Lambda expression
Stream-File InputStream/OutputStream
---------------------------------------------------------------
package org.sandip;

import java.util.HashSet;

public class HashSetDemo1 
{
public static void main(String[] args) 
{
HashSet hs=new HashSet();
hs.add(10);
hs.add(30);
hs.add(20);
hs.add(50);
hs.add(40);
//for each loop
for(Object obj:hs)
	System.out.println(obj);
}
}
---------------------------------------------------------------------------------------
package org.sandip;

import java.util.*;

public class HashSetDemo1 
{
public static void main(String[] args) 
{
HashSet hs=new HashSet();
hs.add(10);
hs.add(30);
hs.add(20);
hs.add(50);
hs.add(40);
//for each loop
for(Object obj:hs)
	System.out.println(obj);
System.out.println("*************************");
Iterator it=hs.iterator();
while(it.hasNext())
{
	System.out.println(it.next());
}
}
}
-----------------------------------------------------------------------------------------------------
List:- It allows duplicate values.
It will display the data in the same order.
example-1
-------------------
package org.sandip;
import java.util.*;
public class ListDemo 
{
public static void main(String[] args) 
{
List li=new ArrayList();
li.add(10);
li.add(50);
li.add(40);
li.add(30);
li.add(20);
System.out.println(li);
li.add(3,100);//inserting in between
System.out.println(li);
li.remove(2);//Removing from in between
System.out.println(li);
li.set(2, 1000); //replace the 3rd no with 1000
System.out.println(li);
}
}
-----------------------------------------------------
example-2
--------------------------------
stack ---First IN Last Out or Last in first out.
package org.sandip;
import java.util.*;
public class StackDemo 
{
public static void main(String[] args)
{
Stack ss=new Stack();
ss.push(10);
ss.push(20);
ss.push(40);
ss.push(30);
ss.push(60);
ss.push(50);
ss.push(70);
System.out.println(ss);
	System.out.println(ss.pop());//delete the last item
	System.out.println(ss);
	System.out.println(ss.peek());//to view the data
	System.out.println(ss);
	System.out.println(ss.search(20));//display the index
	System.out.println(ss.search(200));

}
}
--------------------------------------------------------------------------------------
example-ArrayList
----------------------------------
package org.sandip;

public class Student
{
int rollno;
String name,address;
public Student(int rollno, String name, String address)
{
	this.rollno = rollno;
	this.name = name;
	this.address = address;
}
@Override
public String toString() {
	return "Student [rollno=" + rollno + ", name=" + name + ", address=" + address + "]";
}

}
--------------------------------------------------------------
package org.sandip;
import java.util.*;
public class ArrayList1 
{
public static void main(String[] args) 
{
	Student std1=new Student(101,"amit","Bangalore");
	Student std2=new Student(102,"anil","Bangalore");
	Student std3=new Student(103,"sunil","Bangalore");
	ArrayList<Student> ob1=new ArrayList<Student>();
	ob1.add(std1);
	ob1.add(std2);
	ob1.add(std3);
System.out.println(ob1);
	Iterator itr=ob1.iterator();
	while(itr.hasNext())
	{
		Student st=(Student) itr.next();
System.out.println(st.rollno+"  "+st.name+"  "+st.address);
	}
	
}
}
-----------------------------------------------------------------------------------------------
ListIterator :- It will move in forward direction as well in backward direction.
package org.sandip;
import java.util.*;
public class ListIteratorDemo 
{
public static void main(String[] args) {
	LinkedList li=new LinkedList();
	li.add(10);
	li.add(30);
	li.add(20);
	li.add(40);
	li.add(50);
	ListIterator ll=li.listIterator();
	System.out.println("forward direction");
	while(ll.hasNext())
	{
		System.out.println(ll.next());
	}
	System.out.println("backward direction");
	while(ll.hasPrevious())
	{
		System.out.println(ll.previous());
	}
}
}
-----------------------------------------------------------------------------------------------------
Map :- It is a interface.
In this we enter key and value pair.
The key shouldnot be duplicate .The value can be duplicate.
The key and value pair is known as entry.
Map is useful to search,update,delete element on the basis of the key.
---------------------------------------------------------------------------------------
Map :- HashMap,LinkedHashMap,TreeMap 

Example-1
-----------------
package org.sandip;
import java.util.*;
public class HashMapDemo
{
public static void main(String[] args) 
{
	HashMap<Integer, String> hm=new HashMap<Integer, String>();
	hm.put(1, "sandip");
	hm.put(2,"Akhila");
	hm.put(3,"Ashok");
	hm.put(4,"Anusha");
	hm.put(5,"Arpit");
	Scanner ob=new Scanner(System.in);
	System.out.println("enter rollno,name");
	int rollno=ob.nextInt();
	String name=ob.next();
	hm.put(rollno, name);
	System.out.println(hm);
}
}
-------------------------------Searching Using HashMap-------------------------
Example-2
-------------------
package org.sandip;

public class Student
{
int rollno;
String name,address;
public Student(int rollno, String name, String address)
{
	this.rollno = rollno;
	this.name = name;
	this.address = address;
}
@Override
public String toString() {
	return "Student [rollno=" + rollno + ", name=" + name + ", address=" + address + "]";
}
}
------------------------------------------------------
package org.sandip;
import java.util.*;
public class HashMapDemo1 
{
public static void main(String[] args) 
{
	HashMap<Integer,Student> hm=new HashMap<Integer,Student>();
	Student st1=new Student(101,"sandip","Bangalore");
	Student st2=new Student(102,"Sunil","Bangalore");
	Student st3=new Student(103,"Pradeep","Bangalore");
	hm.put(1,st1);
	hm.put(2,st2);
	hm.put(3,st3);
	Scanner ob=new Scanner(System.in);
	System.out.println("enter the no you want to search");
	int no=ob.nextInt();
	for(Map.Entry<Integer,Student> m:hm.entrySet())
		if(m.getKey()==no)
			System.out.println(m.getKey()+"   "+m.getValue());
		}
}
-----------------------------------------------------------------------------------------------
Queue :- First In First Out
-----------------------------------------------
It is a orderlist that can hold element in the same order.
------------------------------------------------------------------------
package org.sandip;
import java.util.*;
public class QueueDemo 
{
public static void main(String[] args) 
{
	PriorityQueue qu=new PriorityQueue();
	qu.add("Ashok");
	qu.add("Anil");
	qu.add("Sunil");
	qu.add("Arpit");
	qu.add("Sandip");
	System.out.println(qu);
	System.out.println("*************************");
	System.out.println(qu.element());//it will display the head element
	System.out.println(qu.peek());//it will display the head element
	System.out.println(qu.remove());///it will remove the head element
	System.out.println(qu.poll());///it will remove the head element
	
	
}
}
------------------------------------------------------------------HashMap---------------------------
create a bank project (accno,name,balance)
store into a HashMap and display the record which the customer wants to see entering  his accno.
----------------------------------------------------------------------------
Exception Handling
--------------------------------
There are 3 type of error.
1)logical error (wrong logic)
2)compilation error (It is due to missing of ; or spelling mistake)
3)runtime exception.
example :-
a) dividing the no by zero.
b) instead of integer if we enter  string.(input mismatch)
c) Enter extra elements in an array.(arrayindexoutofbound )

we have to handle the runtime exception display proper error message.so that the program should not terminate in between.
----------------------------------------------------------
we have 5 keyword 1)try 2)catch 3)finally 4)throws 5)throw (use defined exception)
--------------------------------------------------------------------------------------------
Example-1
---------------------
package org.Exception;
import java.util.*;
public class ExceptionDemo 
{
public static void main(String[] args) {
	try
	{
	Scanner ob=new Scanner(System.in);
		System.out.println("enter 2 nos");
	int a=ob.nextInt();
	int b=ob.nextInt();
	
	int c=a/b;
	System.out.println("The result is "+c);
	}
	catch(Exception ae)
	{
		System.out.println(ae);
	}
	System.out.println("Hi all");
}
}
--------------------------------------------------------------
Example-2
---------------------
package org.Exception;
import java.util.*;
public class ExceptionDemo 
{
public static void main(String[] args) {
	try
	{
		int a[]=new int[5]; 
	Scanner ob=new Scanner(System.in);
		System.out.println("enter 5 nos");
	for(int i=0;i<5;i++)
	{
		a[i]=ob.nextInt();
	}
	System.out.println(" 5 nos");
	for(int i=0;i<=5;i++)
	{
		System.out.println(a[i]);
	}
		}
	catch(Exception ae)
	{
		System.out.println(ae);
	}
	System.out.println("Hi all");
}
}
---------------------------------------------------------------------
***
If there is no runtime error the catch block will not execute.
If there is no runtime error also  the finally block will  execute.It is used for database connection closing,file closing etc.
--------------------------------------------------------------------------------------
Example-3
---------------------
package org.Exception;
import java.util.*;
public class ExceptionDemo 
{
public static void main(String[] args) {
	try
	{
		int a[]=new int[5]; 
	Scanner ob=new Scanner(System.in);
		System.out.println("enter 5 nos");
	for(int i=0;i<5;i++)
	{
		a[i]=ob.nextInt();
	}
	System.out.println(" 5 nos");
	for(int i=0;i<5;i++)
	{
		System.out.println(a[i]);
	}
		}
		finally
	{
	System.out.println("Hi all");
	}
}
}
-------------------------------------------------------------------------------------
There are 2 types of exception
1)checked exception:- sqlexception,Thread,servlet,
2)Unchecked Exception:- Airthmatic exception,arrayIndexOutOfBound,InputMismatch...

-----------------------------------------
Throws
--------------------
package org.Exception;
import java.util.*;
public class ExceptionDemo extends Thread
{
public static void main(String[] args) throws InterruptedException 
{
	for(int i=0;i<=10;i++)
	{
		System.out.println(i);
		sleep(1000); //1 sec delay
	}
}
}
----------------------------------------------------------------------
Throw
------------------
package org.Exception;
import java.util.*;
public class ExceptionDemo 
{
public static void main(String[] args) throws Exception 
{
	Scanner ob=new Scanner(System.in);
	System.out.println("Enter your age");
	int age=ob.nextInt();
	if(age>=18)
		System.out.println("eligible to vote");
	else
		throw new Exception("Not Eligible to vote");
		
}
}
----------------------------------------------------------------
package org.Exception;
import java.util.*;
public class ExceptionDemo 
{
public static void main(String[] args) 
{
	String ans="y";
	Scanner ob=new Scanner(System.in);
	do
	{
		try
		{
	
	System.out.println("Enter 2 nos");
	int a=ob.nextInt();
	int b=ob.nextInt();
	int c=a/b;
	System.out.println("the result is "+c);
		}
		catch(Exception ae)
		{
			System.out.println(ae);
		}
		System.out.println("want to enter again(y/n)");
		ans=ob.next();
	}
	while(ans.equals("y"));
}
}
-------------------------------------------------------------------------------------------------------------------------------
Thread -It is a sort of execution of instruction.Till now we have done single thread program .The program started from main method and ends.But in multi-threaded program we have multiple threads running concurrently.
-------------------------------------------------------------
Multi Threaded program
----------------------------------------
Each thread will do some task.
In this we will have run method and start().The start() will call the run().
Multiple start() will execute simultaniously or cuncurrently.
In this we have to either extend Thread class or implement runnable interface.
We there is muliple start() running concurrently there will be thread switching because there is only one processer.
-------------------------------------------------------------------------------------
example-1
-------------------
package org.ThreadDemo;
public class FirstThread extends Thread
{
public void run()
{
	try
	{
	for(int i=1;i<=10;i++)
	{
		System.out.println("Thread1 "+i);
	sleep(1000);
	}
	}
	catch( Exception ae)
	{
		ae.printStackTrace();
	}
}
}
------------------------
package org.ThreadDemo;
public class SecondThread extends Thread
{
public void run()
{
	try
	{
	for(int i=1;i<=10;i++)
	{
		System.out.println("Thread2 "+i);
	sleep(1000);
	}
	}
	catch( Exception ae)
	{
		ae.printStackTrace();
	}
}
}
----------------------------------------
package org.ThreadDemo;
public class ThirdThread extends Thread
{
public void run()
{
	try
	{
	for(int i=1;i<=10;i++)
	{
		System.out.println("Thread3 "+i);
	sleep(1000);
	}
	}
	catch( Exception ae)
	{
		ae.printStackTrace();
	}
}
}
------------------------------------------------------
package org.ThreadDemo;

public class Mainclass 
{
	public static void main(String[] args) {
	FirstThread f1=new FirstThread();
SecondThread f2=new SecondThread();
ThirdThread f3=new ThirdThread();
f1.start();//start will call the run().at a time the run() will start executing.
f2.start();
f3.start();
}
}
-----------------------------------------------------------------------------------------------
There are 3 threads or three classes 1)FirstThread,2)SecondThread 3)ThirdThread.each having run().
The run() is called by start().all start method excecute cuncurrently.So the output is a mixture.
-----------------------------------------------------------------------------------------------
In Multi-Threading we can inherite Thread class or implement runnable interface.In the runnable interface we have one method that is run().
--------------------------------------------------------------------------------------------------
Thread Life cycle
----------------------------
1)new born Thread
2)start
3)runnable(choose the thread)
4)running
5)block/wait/sleep
6)dead(excution is completed)
--------------------------------------------------------------------
Methods in Thread class
---------------------------------------------
1)getName() :-It gets the name of the Thread
2)isAlive() :-It check if the thread is still running or completed its execution .It return boolean value.
3)run():-Entry point for the thread.
4)start():- It starts a thread by calling the run().
5)sleep():-It is based on the requirement we can make a thread sleep or wait for a specific time period.
6)setPriority():- we can set the thread priority.
7)getPriority():- we can get the thread priority.
8)MIN_PRIORITY --range (1 to 4)
  NORMAL_PRIORITY --5
MAX_PRIORITY --range (6 to 10)
9)Daemon Thread :- It is low priority thread which runs in the background doing garbage collection.
10)wait() :- The thread will wait until other thread doesnot notify.
11)notify():- wake up a thread which is in waiting state.
12)notifyAll():- This will wake up all the waiting threads.
--------------------------------------------------------------------------------------------------------------------
example-1
--------------------
package org.ThreadDemo;
public class FirstThread extends Thread
{
public void run()
{
	try
	{
	for(int i=1;i<=10;i++)
	{
		System.out.println(currentThread().getName() +"  "+i);
	sleep(1000);
	}
	}
	catch( Exception ae)
	{
		ae.printStackTrace();
	}
}
public static void main(String[] args) {
	FirstThread f1=new FirstThread();
	FirstThread f2=new FirstThread();
	FirstThread f3=new FirstThread();
	f1.start();
	f2.start();
	f3.start();
}
}
------------------------------------------------------------------------------------------
example-2
-------------------
package org.ThreadDemo;
public class FirstThread extends Thread
{
public void run()
{
	try
	{
	for(int i=1;i<=10;i++)
	{
		System.out.println(currentThread().getName() +"  "+i);
	sleep(1000);
	}
	}
	catch( Exception ae)
	{
		ae.printStackTrace();
	}
}
public static void main(String[] args) {
	FirstThread f1=new FirstThread();
	FirstThread f2=new FirstThread();
	FirstThread f3=new FirstThread();
	System.out.println(f1.isAlive());
	f1.start();
	System.out.println(f1.isAlive());
	f2.start();
	f3.start();
}
}
--------------------------------------------------------------------------------------
Example-3
-------------------------
package org.ThreadDemo;
public class FirstThread extends Thread
{
public void run()
{
	try
	{
	for(int i=1;i<=10;i++)
	{
		System.out.println(currentThread().getName() +"  "+i);
	sleep(1000);
	}
	}
	catch( Exception ae)
	{
		ae.printStackTrace();
	}
}
public static void main(String[] args) {
	FirstThread f1=new FirstThread();
	FirstThread f2=new FirstThread();
	FirstThread f3=new FirstThread();
	f1.setPriority(MAX_PRIORITY);
	f2.setPriority(MIN_PRIORITY);
	System.out.println(f1.isAlive());
	f1.start();
	System.out.println(f1.isAlive());
	f2.start();
	f3.start();
	System.out.println(f1.getPriority());
	System.out.println(f2.getPriority());
	System.out.println(f3.getPriority());
	}
}
-------------------------------------------------------------------------------
Thread synchronized :- In this one thread complete the execution then the second thread will start executing.
In this all the start() will not run concurrently.
Example:- ATM one person complete the transaction then the second person do the transaction .This is one after the other.
------------------------------------------------------------------------------------------
DeadLock :- When one thread is waiting for another thread to execute and the other thread is waiting for this thread to execute then a deadlock situation is created.
-----------------------------------------------------------------------------------------------
Example-4
-------------------
package org.ThreadDemo;

public class SynchronizedDemo implements Runnable 
{

	@Override
	synchronized public void run() {
		try
		{
			String name=Thread.currentThread().getName();
			for(int i=1;i<=10;i++)
			{
				System.out.println(name+"  "+i);
				Thread.sleep(1000);
				if(name.equals("Sai")&& (i==4))
				{
					wait();
				}
				if(name.equals("Shilpa")&& (i==4))
				{
					wait();
				}
				if(name.equals("Anusha")&& (i==6))
				{
					notifyAll();
				}
				if(name.equals("Sai")&& (i==9))
				{
					notify();
				}
			}
		}
		catch(Exception ae)
		{
			ae.printStackTrace();
		}
	}
public static void main(String[] args) {
	SynchronizedDemo ob=new SynchronizedDemo();
	Thread ob1=new Thread(ob,"Sai");
	Thread ob2=new Thread(ob,"Shilpa");
	Thread ob3=new Thread(ob,"Anusha");
	ob1.start();ob2.start();ob3.start();
}
}
-------------------------------------------------------------------------------
String :- It is derived datatype.
It is also a class in java
we have 3 similar classes.
1)String:-It is Immutable.(Cannot be changed)
2)StringBuffer:-mutable(can be changed)
3)StringBuilder:-mutable (can be changed)
------------------------------------------------------------------------------------------------------------------
example-1
------------------
package org.stringdemo;

public class StringDemo1 
{
public static void main(String[] args)
{
String s1="apple";
String s2="apple";
String s3=new String("apple");
String s4=new String("apple");
if(s1==s2)---------------------------------------1
System.out.println("true");
else
System.out.println("false");
if(s1==s3)---------------------------------------2
System.out.println("true");
else
System.out.println("false");
if(s3==s4)-----------------------------------------3
System.out.println("true");
else
System.out.println("false");
if(s1.equals(s4))------------------------------------4
System.out.println("true");
else
System.out.println("false");
}
}
----------------------------------------------------------------
In the first case it displays true because it compares the hashcode.
String doesnot create a new memory block when a same string is assigned to two different variables.
So the memory location is same for both the strings.
--------------------------------------------------
But when we use new keyword then a new memory block is created.
so (s1==s3) is false
String s3=new String("apple");
----------------------------------------------------
s1.equals(s3) is true because here there is string comparition.
----------------------------------------------------------------------------------
string is immutable (cannot be changed)
---------------------------------------------------------------
example-2
----------------
package org.stringdemo;

public class StringDemo2 {
public static void main(String[] args) 
{
	String s1="Wipro Software Solution";
	String s2="WiprO Software Solution";
	System.out.println("the string is "+s1);
	System.out.println("the upper case string is "+s1.toUpperCase());
	System.out.println("the lower case string is "+s1.toLowerCase());
	System.out.println("the indexOf string is "+s1.indexOf('W'));
	System.out.println("the indexOf string is "+s1.indexOf('i'));
	System.out.println("the indexOf string is "+s1.lastIndexOf('S'));
	System.out.println("the equal string is "+s1.equals(s2));
	System.out.println("the equal string is "+s1.equalsIgnoreCase(s2));
	System.out.println("the substring string is "+s1.substring(1));
	System.out.println("the substring string is "+s1.substring(0,5));
	System.out.println("the charAt string is "+s1.charAt(0));
	System.out.println("the charAt string is "+s1.charAt(1));
	System.out.println("the startWith string is "+s1.startsWith("Wipro"));
	System.out.println("the endsWith string is "+s1.endsWith("Solution"));
	System.out.println("the Length of string is "+s1.length());
	char x[]=s1.toCharArray();
	int len=x.length;
	for(int i=0;i<len;i++)
	System.out.println(x[i]);
	
}
}
------------------------------------------------------------------------------- 
//to check the string is a palindrom or not
package org.stringdemo;

public class StringDemo3 
{
public static void main(String[] args)
{
String s1="Radar";
String rev="";
int strlenth =s1.length();
System.out.println("the length is "+strlenth);
for(int i=(strlenth -1);i>=0;--i)
	rev=rev+s1.charAt(i);
System.out.println(rev);
if(s1.toLowerCase().equals(rev.toLowerCase()))
{
	System.out.println("string is palindrom");
}
else
{
	System.out.println("strig is not palindrom");
}
}
}
-------------------------------------------------------------------------------------------------------------------
String Buffer :- It is muttable (can be changed)
--------------------------------------------------------------------------
package org.stringdemo;

public class StringDemo4 
{
public static void main(String[] args) 
{
	StringBuffer s1=new StringBuffer("My name ");
	StringBuffer s2=new StringBuffer(" is sandip ");
	StringBuffer s3=new StringBuffer("I am 40 years Old");
	System.out.println(s1.append(s2));
	System.out.println(s1.append(s3));
	System.out.println(s1);
	s1.setCharAt(0,'m');
	System.out.println(s1);
	System.out.println(s1.length());
	System.out.println(s1.insert(36, "I am a trainer"));
	System.out.println(s1.length());
	System.out.println(s1.delete(34,38));
	System.out.println(s1.reverse());
	System.out.println(s1);
}
}
---------------------------------------------------------------------------------------------------------------------
String Buffer is synchronized .
String Builder is not synchronized.
--------------------------------------------------------
Files
---------------
1)It is used to store and manage data.
2)We can read data from a file and write data into a file.
3)We can do this operation using byte stream or character stream.
4)stream is a flow of data .From source to destination. From a source file to a destination file.
5)we will be using java.io.package.
6)while working with files we have to handle exception.They are checked Exception.
exceptions are:- 1)EOFException,FileNotFoundException,InterruptedIOException,IOException.
----------------------------------------------------------------------------------------------------------------------------------
example-1
-------------------
package org.files;
import java.io.*;
import java.util.*;
public class Files1
{
public static void main(String[] args)
{
Scanner ob=new Scanner(System.in);
System.out.println("Enter the file name");
String fname=ob.next();
File f=new File(fname);
System.out.println("the file name is "+f.getName());
System.out.println("the file path is "+f.getPath());
System.out.println("the file path is "+f.getAbsolutePath());
System.out.println("the file existing is "+f.exists());
System.out.println("the file read  "+f.canRead());
System.out.println("the file write "+f.canWrite());
System.out.println("the file is file/directory  "+f.isFile());
System.out.println("the file is file/directory  "+f.isDirectory());
System.out.println("the file  length  "+f.length());
}
}
--------------------------------------
create the file on the project.
--------------------------------------------------------
We have 2 types of Stream 1)byte stream 2)char stream
------------------------------------------------------------
In byte stream we have :-
InputStream to read the data from the file.
OutputStream to write data from the file.

we have some classes in byte stream
1)BufferInputStream/BufferOutputStream
2)FileInputStream/FileOutputStream
3)ObjectInputStream/ObjectOutputStream -----serialization and de-serialization (means writing Object into the file and reading Object from the file).
4)DataInputStream /DataOutputStream
----------------------------------------------------------------
Example-2
-------------------
package org.files;
import java.io.*;
public class SecondFile 
{
public static void main(String[] args)throws Exception
{
	DataInputStream dis=new DataInputStream(System.in);
	FileOutputStream fos=new FileOutputStream("student.txt");
	System.out.println("Enter the data");
	int data;
	while((data=dis.read())!='\n')
	{
		fos.write(data);
	}
	dis.close();fos.close();
}
}
-----------------------------------
*student.txt will be automatically created.
you have to refresh the project.
------------------------------------------------------------------
example-3
Reading the data from a file and storing into another file.
-------------------------------------------------------------------------------
package org.files;
import java.io.*;
public class Third 
{
public static void main(String[] args)throws Exception
{
	FileInputStream fis=new FileInputStream("student.txt");
	FileOutputStream fos=new FileOutputStream("student1.txt");
	int data;
	while((data=fis.read())!=-1) //-1 indicates the end of the file.
	{
		fos.write(data);
	}
	fis.close();fos.close();
	System.out.println("file writing over----------------");
}
}
-------------------------------------------------------------------




















